local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")


local MAX_WALK_SPEED = 20 
local MAX_JUMP_HEIGHT = 7.2 
local MAX_DISTANCE_PER_FRAME = 50 
local NOCLIP_CHECK_INTERVAL = 1 
local MIN_Y_VELOCITY_FOR_JUMP = 20 
local MAX_FALL_DISTANCE = 100 


local playerData = {}

local function initializePlayerData(player)
    playerData[player.UserId] = {
        lastPosition = nil,
        lastNoclipCheckTime = tick(),
        lastJumpTime = tick(),
        lastFallCheckPosition = nil,
        isFalling = false
    }
end

local function cleanupPlayerData(player)
    playerData[player.UserId] = nil
end

Players.PlayerAdded:Connect(initializePlayerData)
Players.PlayerRemoving:Connect(cleanupPlayerData)

local function kickPlayer(player, reason)
    player:Kick("Anti-Cheat Violation: " .. reason)
    warn(player.Name .. " was kicked for: " .. reason)
end

RunService.Heartbeat:Connect(function(deltaTime)
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
            local humanoid = character.Humanoid
            local rootPart = character.HumanoidRootPart
            local currentPosition = rootPart.Position
            local userId = player.UserId

            if not playerData[userId] then
                initializePlayerData(player)
            end

            local data = playerData[userId]

            if data.lastPosition then
                local distanceMoved = (currentPosition - data.lastPosition).Magnitude
                if distanceMoved / deltaTime > MAX_DISTANCE_PER_FRAME then
                    -- Allow for large movements if teleporting legitimately (e.g., spawn, admin teleport)
                    -- This is a very basic check. More advanced checks would involve raycasting or server-side position tracking.
                    if humanoid.MoveDirection.Magnitude > 0 or humanoid.Jump then -- Only check if player is actively moving
                        -- Consider adding a debounce or more sophisticated check here
                        -- kickPlayer(player, "Speed/Teleport Hack Detected")
                        warn(player.Name .. " potentially speed/teleport hacking. Distance: " .. tostring(distanceMoved) .. " per frame.")
                        -- For now, just warn. Kicking immediately for this can lead to false positives.
                        -- A better approach is to check for consistent high speeds over time.
                    end
                end
            end
            data.lastPosition = currentPosition

            if tick() - data.lastNoclipCheckTime >= NOCLIP_CHECK_INTERVAL then
                local rayOrigin = rootPart.Position
                local rayDirection = Vector3.new(0, -1, 0) * (humanoid.HipHeight + 1) -- Check slightly below character
                local raycastParams = RaycastParams.new()
                raycastParams.FilterDescendantsInstances = {character}
                raycastParams.FilterType = Enum.RaycastFilterType.Exclude

                local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

                if not result then
                    local partsInArea = workspace:GetPartsInPart(rootPart)
                    local isCollidingWithSolid = false
                    for _, part in ipairs(partsInArea) do
                        if part.CanCollide and part.Parent ~= character and not part.IsA("ForceField") then
                            isCollidingWithSolid = true
                            break
                        end
                    end
                    if not isCollidingWithSolid and humanoid.Sit == false and humanoid.FloorMaterial == Enum.Material.Air then
                        -- This condition is tricky. It attempts to catch noclip when not sitting and not on a floor.
                        -- kickPlayer(player, "Noclip suspected")
                        warn(player.Name .. " suspected of noclip (no solid ground/collision).")
                    end
                end
                data.lastNoclipCheckTime = tick()
            end

            
            if humanoid.FloorMaterial == Enum.Material.Air and rootPart.AssemblyLinearVelocity.Y > MIN_Y_VELOCITY_FOR_JUMP then
                if tick() - data.lastJumpTime > 0.5 then
                    
                end
            end

            
            if humanoid.FloorMaterial == Enum.Material.Air and not data.isFalling then
                data.isFalling = true
                data.lastFallCheckPosition = currentPosition
            elseif humanoid.FloorMaterial ~= Enum.Material.Air and data.isFalling then
                data.isFalling = false
                if data.lastFallCheckPosition then
                    local fallDistance = (currentPosition.Y - data.lastFallCheckPosition.Y) * -1 -- Calculate vertical fall distance
                    if fallDistance > MAX_FALL_DISTANCE and humanoid.Health == humanoid.MaxHealth then
                        -- Player fell a large distance but took no damage.
                        -- This is a strong indicator of fall damage bypass.
                        -- kickPlayer(player, "Fall Damage Bypass Detected")
                        warn(player.Name .. " suspected of fall damage bypass. Fall distance: " .. tostring(fallDistance))
                    end
                end
            end

      
           
            if humanoid.WalkSpeed > MAX_WALK_SPEED + 0.1 then -- Add a small tolerance
                humanoid.WalkSpeed = MAX_WALK_SPEED
                warn(player.Name .. " attempted to set WalkSpeed to " .. tostring(humanoid.WalkSpeed) .. ". Resetting.")
                -- kickPlayer(player, "WalkSpeed Hack Detected") -- Consider kicking if persistent
            end
            if humanoid.JumpPower > MAX_JUMP_HEIGHT * 10 then -- JumpPower is usually around 50, so a higher multiplier
                humanoid.JumpPower = 50 -- Default JumpPower
                warn(player.Name .. " attempted to set JumpPower to " .. tostring(humanoid.JumpPower) .. ". Resetting.")
                -- kickPlayer(player, "JumpPower Hack Detected") -- Consider kicking if persistent
            end
        end
    end
end)
